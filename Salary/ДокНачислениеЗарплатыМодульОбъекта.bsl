
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения.ОсновныеНачисления.Записывать = Истина;
	Движения.ДополнительныеНачисления.Записывать = Истина;
	
	
	Для Каждого ТекСтрокаСписок Из Список Цикл 
		Если ТипЗнч(ТекСтрокаСписок.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисления") Тогда		
			
			// регистр ОсновныеНачисления
			
			Движение = Движения.ОсновныеНачисления.Добавить();
			Движение.Сторно = Ложь;
			Движение.ВидРасчета = ТекСтрокаСписок.ВидРасчета;
			
			//  Период Действия
			Движение.ПериодДействияНачало = ТекСтрокаСписок.ДатаНачала;
			Движение.ПериодДействияКонец = КонецДня(ТекСтрокаСписок.ДатаОкончания);
			Движение.ПериодРегистрации = ПериодРегистрации;
			
			// Если  КМД - 2 Месяца
			Если Движение.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Командировка Тогда      
				
				Движение.БазовыйПериодНачало = НачалоМесяца(ДобавитьМесяц(Движение.ПериодДействияНачало,-2)); 			
				Движение.БазовыйПериодКонец =  КонецМесяца(ДобавитьМесяц(Движение.ПериодДействияНачало,-1));  
				
			КонецЕсли;	
			
			Движение.Подразделение = ТекСтрокаСписок.Подразделение;
			Движение.Сотрудник = ТекСтрокаСписок.Сотрудник;
			Движение.Результат = ТекСтрокаСписок.Размер;
			Движение.График = ТекСтрокаСписок.График;
			Движение.Размер = ТекСтрокаСписок.Размер;  
			
		ИначеЕсли ТипЗнч(ТекСтрокаСписок.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисления") Тогда
			
			
			// регистр ДополнительныеНачисления
			Движение = Движения.ДополнительныеНачисления.Добавить();
			Движение.Сторно = Ложь;
			Движение.ВидРасчета = ТекСтрокаСписок.ВидРасчета;
			
			Движение.ПериодРегистрации = ПериодРегистрации;
			
			// ЕСли ПРЕМИЯ Базовый Период  Месяц		
			Если Движение.ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисления.Премия Тогда      
				
				Движение.БазовыйПериодНачало = НачалоМесяца(ПериодРегистрации); 			
				Движение.БазовыйПериодКонец =  КонецМесяца(ПериодРегистрации);  
				
			КонецЕсли;
			
			Движение.Подразделение = ТекСтрокаСписок.Подразделение;
			Движение.Сотрудник = ТекСтрокаСписок.Сотрудник;
			Движение.Результат = ТекСтрокаСписок.Размер;
			Движение.Размер = ТекСтрокаСписок.Размер;
			
		КонецЕсли;		
	КонецЦикла;       
	
	ТаблицаДополнений = Движения.ОсновныеНачисления.ПолучитьДополнение();
	
	Для каждого СтрокаТаблицы  Из ТаблицаДополнений Цикл
		
		// регистр ОсновныеНачисления
		Движение = Движения.ОсновныеНачисления.Добавить();
		Движение.Сторно = Истина;
		Движение.ВидРасчета = СтрокаТаблицы.ВидРасчета;
		Движение.ПериодДействияНачало = СтрокаТаблицы.ПериодДействияНачалоСторно;
		Движение.ПериодДействияКонец = КонецДня(СтрокаТаблицы.ПериодДействияКонецСторно);
		Движение.ПериодРегистрации = СтрокаТаблицы.ПериодРегистрацииСторно;  
		
		Движение.Подразделение = СтрокаТаблицы.Подразделение;
		Движение.Сотрудник = СтрокаТаблицы.Сотрудник;
		Движение.График = ТекСтрокаСписок.График;
		Движение.Размер = -СтрокаТаблицы.Размер
		
	КонецЦикла;
	
	Движения.Записать();
	
	// Расчет ОКЛАДА		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК ОкладФакт,
	|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеПериодДействия, 0) КАК ОкладПлан,
	|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисления.ДанныеГрафика(
	|			Регистратор = &Регистратор
	|				И ВидРасчета = &ВидРасчета) КАК ОсновныеНачисленияДанныеГрафика";
	
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОклад = РезультатЗапроса.Выбрать();
	
	Для каждого СтрокаНабора Из Движения.ОсновныеНачисления Цикл
		Если СтрокаНабора.ВидРасчета <>  ПланыВидовРасчета.ОсновныеНачисления.Оклад  Тогда 
			Продолжить;
		КонецЕсли;
		
		ВыборкаОклад.Сбросить();
		ВыборкаОклад.НайтиСледующий(СтрокаНабора.НомерСтроки, "НомерСтроки");
		
		// проверка / 0
		СтрокаНабора.Результат = ?(ВыборкаОклад.ОкладПлан = 0
		,0
		,СтрокаНабора.Размер/ВыборкаОклад.ОкладПлан*ВыборкаОклад.ОкладФакт); 
		СтрокаНабора.ОтработаноРеквизит = ВыборкаОклад.ОкладФакт;
		
	КонецЦикла;
	
	Движения.ОсновныеНачисления.Записать(,Истина);  
	
	
	// Расчет ПРЕМИИ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеНачисленияБазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
	|	ДополнительныеНачисленияБазаОсновныеНачисления.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисления.БазаОсновныеНачисления(
	|			&Измерения,
	|			&Измерения,
	|			,
	|			Регистратор = &Регистратор
	|				И ВидРасчета = &ВидРасчета) КАК ДополнительныеНачисленияБазаОсновныеНачисления";
	
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ДополнительныеНачисления.Премия);
	
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
	Измерения.Добавить("Подразделение"); 
	
	Запрос.УстановитьПараметр("Измерения", Измерения);   
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПремия = РезультатЗапроса.Выбрать();
	
	Для каждого СтрокаНабора Из Движения.ДополнительныеНачисления Цикл    
		
		Если СтрокаНабора.ВидРасчета <> ПланыВидовРасчета.ДополнительныеНачисления.Премия Тогда 
			Продолжить;
		КонецЕсли;
		
		ВыборкаПремия.Сбросить();
		Если ВыборкаПремия.НайтиСледующий(СтрокаНабора.НомерСтроки,"НомерСтроки")Тогда 
			СтрокаНабора.Результат = СтрокаНабора.Размер * ВыборкаПремия / 100;
		Иначе 
			СтрокаНабора.Результат = 0;		
		КонецЕсли;	
	КонецЦикла; 	
	
	Движения.ДополнительныеНачисления.Записать();      
	
	// Расчет КОМАНДИРОВКИ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК ОтработаноФакт,
	|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеБазовыйПериод, 0) КАК ОтработаноНорма,
	|	ЕСТЬNULL(ОсновныеНачисленияБазаДополнительныеНачисления.РезультатБаза, 0) КАК БазаДоп,
	|	ЕСТЬNULL(ОсновныеНачисленияБазаОсновныеНачисления.РезультатБаза, 0) КАК БазаОсн
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисления.ДанныеГрафика(
	|			Регистратор = &Регистратор
	|				И ВидРасчета = &ВидРасчета) КАК ОсновныеНачисленияДанныеГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисления.БазаДополнительныеНачисления(
	|				&Измерения,
	|				&Измерения,
	|				,
	|				Регистратор = &Регистратор
	|					И ВидРасчета = &ВидРасчета) КАК ОсновныеНачисленияБазаДополнительныеНачисления
	|		ПО ОсновныеНачисленияДанныеГрафика.НомерСтроки = ОсновныеНачисленияБазаДополнительныеНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисления.БазаОсновныеНачисления(
	|				&Измерения,
	|				&Измерения,
	|				,
	|				Регистратор = &Регистратор
	|					И ВидРасчета = &ВидРасчета) КАК ОсновныеНачисленияБазаОсновныеНачисления
	|		ПО ОсновныеНачисленияДанныеГрафика.НомерСтроки = ОсновныеНачисленияБазаОсновныеНачисления.НомерСтроки";
	
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОсновныеНачисления.Командировка);    
	
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
	Измерения.Добавить("Подразделение");
	
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКомандировка = РезультатЗапроса.Выбрать();   
	
	СтруктураДляПоиска = Новый Структура("НомерСтроки");
	
	Для каждого СтрокаНабора  Из Движения.ОсновныеНачисления Цикл     
		
		Если СтрокаНабора.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисления.Командировка Тогда 	
			Продолжить; 
		КонецЕсли;
		
		СтруктураДляПоиска.НомерСтроки = СтрокаНабора.НомерСтроки;
		
		ВыборкаКомандировка.Сбросить();                                         	
		ВыборкаКомандировка.НайтиСледующий(СтруктураДляПоиска);
		
		СтрокаНабора.Результат = ?(ВыборкаКомандировка.ОтработаноНорма = 0
			,0
			,(ВыборкаКомандировка.БазаДоп + ВыборкаКомандировка.БазаОсн)/
			ВыборкаКомандировка.ОтработаноНорма * ВыборкаКомандировка.ОтработаноФакт);
		
		СтрокаНабора.ОтработаноРеквизит = ВыборкаКомандировка.ОтработаноФакт;
		
	КонецЦикла; 	
	
	Движения.ОсновныеНачисления.Записать(,Истина);
	

КонецПроцедуры
